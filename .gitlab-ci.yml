image: registry.gitlab.com/technic93/e2designer:latest

# To run tests with local image use
# gitlab-runner exec docker --docker-pull-policy="if-not-present" --docker-privileged <command>

variables:
    UBUNTU_IMAGE: registry.gitlab.com/technic93/e2designer:latest
    FLATPAK_IMAGE: registry.gitlab.com/technic93/e2designer:flatpak
    BINTRAY_USER: technic
    BINTRAY_REPO: e2designer
    BINTRAY_PACKAGE: e2designer
    BINTRAY_URL: https://api.bintray.com/content/technic/e2designer/e2designer
    APP_NAME: org.technic93.e2designer

stages:
  - images
  - build
  - tests
  - package
  - deploy

.docker:
    stage: images
    image: docker:git
    services:
        - docker:dind
    before_script:
        - docker info
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    when: manual

image:qt:
  extends: .docker
  script:
    - docker build docker/qt --pull -t $UBUNTU_IMAGE
    - docker push $UBUNTU_IMAGE

image:flatpak:
  extends: .docker
  script:
    - docker build docker/flatpak --pull -t $FLATPAK_IMAGE
    - docker push $FLATPAK_IMAGE

format:
  stage: build
  before_script:
    - clang-format --version
  script:
    - clang-format -style=file -i
      $(find . \( -path './Qt-Color-Widgets' -o -path './AppImageUpdaterBridge' \) -prune -o
      \( -name '*.hpp' -o -name '*.cpp' \) -print)
    - git diff --exit-code

before_script:
  - . /opt/qt${Qt}/bin/qt${Qt}-env.sh
  - which qmake
  - qmake --version
  - g++ --version
  - clang++ --version
  - mkdir -p ccache
  - export CCACHE_BASEDIR=${PWD}
  - export CCACHE_DIR=${PWD}/ccache
  - ccache -sz
  - export VERSION=$(git describe)
  - cat /proc/cpuinfo

build:release:
  stage: build
  script:
    - mkdir -p build && pushd build
    - qmake .. "QMAKE_CXX = ccache g++"
    - scan-build -o ../report make -j$(nproc)
    - ccache -s
    - make -C app INSTALL_ROOT=$(pwd)/appdir install
  artifacts:
    paths:
      - build/
      - report/
  cache:
    paths:
      - ccache/

build:debug:
  stage: build
  script:
    - mkdir -p build && pushd build
    - qmake .. "QMAKE_CXX = ccache g++" "CONFIG += debug" "QMAKE_CXXFLAGS += -fprofile-arcs -ftest-coverage" "QMAKE_LFLAGS += --coverage"
    - make -j$(nproc)
    - ccache -s
  artifacts:
    paths:
      - build/
  cache:
    paths:
      - ccache/

CodeCheker:
  stage: build
  script:
    - apt-get update && apt-get install -y build-essential gcc-multilib python-virtualenv python-dev thrift-compiler
    - git clone https://github.com/Ericsson/CodeChecker.git --depth 1 ~/codechecker
    - cd ~/codechecker && make venv && source "$PWD/venv/bin/activate"
    - make package && export PATH="$PWD/build/CodeChecker/bin:$PATH"
    - cd "$CI_PROJECT_DIR" && mkdir -p build && pushd build
    - qmake -spec linux-clang ..
    - CodeChecker check -b "make" -o ./reports
    - CodeChecker parse ./reports -e html -o ../reports_html
  artifacts:
    paths:
      - reports_html/

AppImage:
  stage: package
  dependencies:
    - build:release
  script:
    - pushd build
    - find appdir
    - curl -fsSL -o linuxdeployqt https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
    - chmod a+x linuxdeployqt
    - curl -fsSL -o appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
    - chmod a+x appimagetool
    - ./linuxdeployqt appdir/usr/share/applications/e2designer.desktop -bundle-non-qt-libs
      -extra-plugins=iconengines,imageformats
    - ./appimagetool -n --bintray-user $BINTRAY_USER --bintray-repo $BINTRAY_REPO -v appdir
  artifacts:
    paths:
      - build/*.AppImage
      - build/*.AppImage.zsync

clazy:
  stage: build
  script:
    - curl -L -o /usr/local/bin/clazy https://downloads.kdab.com/clazy/1.5/Clazy-x86_64-1.5.AppImage
    - chmod a+x /usr/local/bin/clazy
    - mkdir -p build && pushd build
    - qmake .. "QMAKE_CXX = clazy" "QMAKE_CXXFLAGS += -Werror -fcolor-diagnostics"
    - make
  allow_failure: true

clang-tidy:
  stage: build
  script:
    - mkdir -p build && cd build
    - qmake -spec linux-clang .. "QMAKE_CXXFLAGS += -fcolor-diagnostics -Wno-register"
    - bear make -j$(nproc)
    - run-clang-tidy.py

test:
  stage: tests
  dependencies:
    - build:release
  script:
  - pushd build
  - make check

coverage:
    stage: tests
    dependencies:
      - build:debug
    script:
    - pushd build
    - make check
    - popd
    - lcov --no-external --directory . --capture --output-file coverage.info
    - lcov --remove coverage.info "moc_*" "*.moc" "qrc_*" "tests/*" --output-file coverage.info
    - lcov --list coverage.info
    - genhtml coverage.info --output-directory coverage-report
    coverage: '/Total:\|(\d+\.?\d+\%)/'
    artifacts:
      paths:
        - coverage-report/

flatpak:
  image: $FLATPAK_IMAGE
  stage: package
  before_script:
    - flatpak --version
    - flatpak-builder --version
  script:
    - cat $APP_NAME.yaml | yaml2json.py > $APP_NAME.json
    - flatpak-builder --ccache --repo=flatpak-repo flatpak-build $APP_NAME.json
    - flatpak build-bundle flatpak-repo e2designer.flatpak $APP_NAME
  artifacts:
    paths:
      - "*.flatpak"

deploy:
  stage: deploy
  only:
    - master
  dependencies:
    - AppImage
    - flatpak
  script:
    - curl -T build/e2designer-$VERSION-x86_64.AppImage -u technic:$BINTRAY_API_KEY
      $BINTRAY_URL/$VERSION/e2designer-$VERSION-x86_64.AppImage
    - curl -T build/e2designer-$VERSION-x86_64.AppImage.zsync -u technic:$BINTRAY_API_KEY
      $BINTRAY_URL/$VERSION/e2designer-$VERSION-x86_64.AppImage.zsync
    - curl -T e2designer.flatpak -u technic:$BINTRAY_API_KEY
      $BINTRAY_URL/$VERSION/e2designer-$VERSION.flatpak
    - python3 bintray.py
